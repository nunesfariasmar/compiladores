#line 2 "gr8_scanner.cpp"

#line 4 "gr8_scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer gr8_scanner_FlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *gr8_scanner_alloc (yy_size_t  );
void *gr8_scanner_realloc (void *,yy_size_t  );
void gr8_scanner_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[446] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   92,   90,   89,   80,   90,   53,
       86,   90,   79,   78,   90,   51,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   81,   81,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,   56,   65,   54,   56,
       56,    4,    4,    4,   72,   71,   72,   84,   82,   91,
       83,   85,   68,   67,   66,   80,    0,    0,   73,    0,
       79,    0,    0,   78,    1,   52,   52,   52,   52,   22,

       48,   52,   40,   52,   52,   41,   52,   52,   52,   52,
       52,   52,   52,   17,   52,   52,   52,   52,   52,   52,
       52,   27,   16,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   37,   52,   52,   88,    0,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    0,
       58,   61,   63,   64,   62,   57,    2,    3,    0,    0,

       87,    0,   73,    0,    0,   75,   52,   52,   15,   52,
       52,   52,   52,   52,   52,   52,   46,   52,   52,   52,
       52,   52,   52,   52,   52,   14,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       45,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        0,   60,    0,   69,    0,   77,   74,   52,   52,   52,
       52,   47,   52,   18,   52,   52,   30,   39,   52,   26,

       52,   52,   52,   52,   28,   49,   52,   12,   10,   32,
       52,   52,   52,   52,   34,   52,   44,   52,   52,   42,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,   55,   59,   70,   76,    7,   33,
       52,    6,   52,   43,   52,   52,   52,   19,    9,   52,
       52,   52,   52,   52,   25,   52,   11,   31,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,   36,   20,

        8,   52,   52,   52,   52,   52,   21,   35,   52,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
       52,   52,   13,   50,   52,   52,    5,    5,    5,    5,
        5,    5,   23,   52,   52,   38,    5,    5,    5,    5,
       29,   24,    5,    5,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    1,    1,    7,    8,
        8,    1,    1,    9,   10,   11,    1,   12,   13,   13,
       13,   13,   13,   13,   14,   14,   14,    1,    9,   15,
        9,   16,   17,    1,   18,   18,   18,   18,   19,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
        1,    1,    1,    1,    1,    1,   20,   21,   22,   23,

       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   18,
       43,   18,    9,    1,    9,   44,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[45] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    1,    3,
        2,    4,    4,    4,    1,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1
    } ;

static yyconst flex_int16_t yy_base[456] =
    {   0,
        0,   44,   86,   88,   81,   83,   97,   98,  100,  103,
      843,  839,  107,  108,  836, 1220, 1220,  829,  821, 1220,
     1220,  104,  109,  123,  807, 1220,    0,  105,  103,  794,
       95,  109,  119,  774,  116,  120,  126,  130,  121,  780,
      130,  146,  764, 1220,  121,    0,  164,  170,  179,  189,
      196,  200,  204,  208,  215,  244,  228,  237,  248,  229,
      265,  240,  279,  283,  318,  299, 1220, 1220, 1220,  755,
      228, 1220,  780,  772, 1220, 1220,  776, 1220, 1220, 1220,
     1220, 1220, 1220, 1220, 1220,  776,  772,  763,  299,  173,
      319,  337,  307,  351, 1220,    0,  733,  735,  730,  712,

        0,  715,    0,  711,  713,    0,  698,  694,  699,  691,
      691,  690,  695,    0,  129,  687,  692,  670,  669,  673,
      671,    0,    0,  663,  641,  640,  637,  645,  618,  633,
      610,  615,  611,  599,    0,  603,  599, 1220,  192,    0,
      608,  354,  283,  368,  372,  345,  386,  331,  361,  393,
      366,  398,  404,  408,  412,  416,  420,  424,  430,  438,
      442,  446,  450,  454,  459,  463,  469,  478,  482,  488,
      492,  498,  504,  508,  512,  516,  524,  528,  533,  537,
      541,  545,  549,  560,  564,  568,  579,  583,  587,  602,
      189,  208, 1220, 1220, 1220, 1220, 1220, 1220,  597,  593,

     1220,  589,  322,  589,  430,  549,  545,  557,    0,  554,
      547,  546,  545,  181,  549,  530,    0,  518,  524,  518,
      498,  488,  485,  481,  479,    0,  482,  486,  470,  463,
      456,  472,  460,  442,  450,  441,  451,  433,  439,  435,
      417,  448,  592,  600,  603,  610,  614,  618,  622,  626,
      630,  635,  644,  654,  659,  648,  665,  669,  674,  678,
      682,  691,  695,  699,  703,  708,  716,  722,  733,  737,
      741,  746,  750,  754,  758,  762,  770,  781,  786,  790,
      431,  218,  430, 1220,  635,  682,  770,  405,  392,  395,
      375,    0,  378,    0,  382,  371,    0,    0,  355,    0,

      365,  351,  350,  323,    0,    0,  331,    0,    0,    0,
      323,  316,  303,  296,    0,  289,    0,  278,  275,    0,
      794,  801,  805,  809,  813,  819,  823,  829,  833,  837,
      841,  849,  853,  859,  863,  867,  871,  876,  885,  889,
      893,  900,  906,  910,  914,  918,  922,  926,  931,  937,
      941,  945,  950,  954, 1220, 1220, 1220,  876,    0,    0,
      275,    0,  280,    0,  263,  272,  272,    0,    0,  248,
      244,  256,  253,  240,    0,  229,    0,    0,  958,  963,
      967,  971,  977,  982,  986,  994,  998, 1002, 1006, 1015,
     1019, 1023, 1027, 1031, 1037, 1042, 1046, 1051,    0,    0,

        0,  216,  213,  199,  195,  187,    0,    0,  180, 1055,
     1061, 1065, 1069, 1073, 1077, 1081, 1085, 1089, 1097, 1101,
      146,  139,    0,    0,  131,  139, 1106, 1110, 1116, 1120,
     1125, 1132,    0,   69,   66,    0, 1136, 1140, 1144, 1149,
        0,    0, 1153, 1159, 1220, 1183, 1187, 1191, 1195, 1199,
     1203, 1205, 1208, 1211, 1215
    } ;

static yyconst flex_int16_t yy_def[456] =
    {   0,
      445,  445,  446,  446,  447,  447,  448,  448,  449,  449,
      450,  450,  451,  451,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  445,  445,  453,  453,  453,  453,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,   56,
       56,   56,  454,  454,  454,  454,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  455,  445,  445,  445,
      445,  445,  445,  445,  445,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  445,  445,  453,
      453,  453,  453,  453,  453,  453,  453,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  455,

      445,  445,  445,  445,  445,  445,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  453,  453,  453,  453,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      445,  445,  445,  445,  445,  445,  445,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      453,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  445,  445,  445,  445,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  452,  452,

      452,  452,  452,  452,  452,  452,  452,  452,  452,  454,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      452,  452,  452,  452,  452,  452,  454,  454,  454,  454,
      454,  454,  452,  452,  452,  452,  454,  454,  454,  454,
      452,  452,  454,  454,    0,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445
    } ;

static yyconst flex_int16_t yy_nxt[1265] =
    {   0,
       16,   17,   18,   17,   19,   20,   16,   21,   21,   16,
       22,   23,   24,   24,   25,   16,   26,   27,   27,   28,
       29,   30,   31,   32,   33,   27,   34,   35,   27,   27,
       27,   36,   37,   38,   39,   27,   40,   41,   42,   43,
       27,   27,   27,   16,   16,   44,   18,   45,   19,   20,
       16,   46,   21,   16,   47,   48,   49,   49,   25,   16,
       26,   50,   50,   51,   52,   53,   54,   55,   56,   50,
       57,   58,   50,   50,   50,   59,   60,   61,   62,   50,
       63,   64,   65,   66,   50,   50,   50,   16,   68,  442,
       68,   69,   70,   69,   70,   73,   74,   73,   74,   76,

       76,   79,   80,   81,   79,   80,   81,   77,   77,   84,
       84,  441,   85,   85,   88,   89,   89,   89,  105,   90,
       91,   91,   92,  138,  139,   97,  102,   93,  106,   71,
       98,   71,   93,   90,   94,   94,   94,   99,  109,  107,
      114,   93,  100,  101,  108,  103,   93,  116,  115,  118,
      121,  125,  110,  117,  126,  111,  221,  127,  112,  119,
      128,  130,  122,  222,  436,  120,  123,  435,  131,  434,
      124,  132,  133,  134,  141,  142,  142,  142,  433,  135,
      143,  144,  144,  145,   89,   89,   89,  136,  146,  143,
      147,  147,  147,  146,  138,  139,  140,  146,   96,  140,

      282,  282,  146,  140,  294,   96,  140,  140,  295,   96,
      140,  140,  426,   96,  140,  140,  149,   96,  140,  282,
      282,  150,  140,  154,   96,  140,  425,  156,  151,  356,
      356,  157,  424,  152,  153,  140,  423,   96,  140,  191,
      192,  158,  155,  422,  140,  159,   96,  140,  148,  421,
      160,  140,  170,   96,  140,  140,  409,   96,  140,  148,
      193,  166,  171,  161,  194,  148,  195,  165,  172,  167,
      177,  196,  408,  178,  407,  168,  179,  162,  406,  180,
      163,  169,  405,  164,  148,  173,  140,  404,   96,  140,
      140,  403,   96,  140,  142,  142,  142,  174,  148,  402,

      401,  175,  181,  400,  148,  176,  140,  399,   96,  140,
      203,  203,  203,  378,  182,  377,  205,  204,  206,  206,
      206,  183,  204,  376,  184,  140,  375,   96,  140,   90,
       91,   91,   92,  203,  203,  203,  189,   93,  140,  374,
       96,  140,   93,  373,  185,  186,  372,   90,   92,   92,
       92,  187,  371,  370,  205,   93,  245,  245,  245,  188,
       93,   90,   94,   94,   94,  243,  243,  243,  140,   93,
       96,  140,  244,  140,   93,   96,  140,  244,  143,  144,
      144,  145,  143,  145,  145,  145,  146,  369,  248,  368,
      146,  146,  367,  366,  246,  146,  143,  147,  147,  147,

      140,  365,   96,  140,  146,  140,  364,   96,  140,  146,
      363,  140,  247,   96,  140,  140,  362,   96,  140,  140,
      361,   96,  140,  140,  360,   96,  140,  140,  359,   96,
      140,  140,  357,   96,  140,  249,  355,  140,  250,   96,
      140,  287,  287,  287,  252,  140,  251,   96,  140,  140,
      284,   96,  140,  140,  320,   96,  140,  140,  319,   96,
      140,  140,  318,   96,  140,  317,  140,  253,   96,  140,
      140,  255,   96,  140,  316,  315,  140,  254,   96,  140,
      314,  313,  256,  257,  259,  140,  258,   96,  140,  140,
      312,   96,  140,  311,  310,  140,  260,   96,  140,  140,

      309,   96,  140,  261,  263,  140,  308,   96,  140,  307,
      262,  140,  306,   96,  140,  140,  305,   96,  140,  140,
      304,   96,  140,  140,  303,   96,  140,  302,  266,  264,
      265,  140,  267,   96,  140,  140,  301,   96,  140,  268,
      140,  300,   96,  140,  140,  299,   96,  140,  140,  298,
       96,  140,  140,  297,   96,  140,  140,  272,   96,  140,
      206,  206,  206,  269,  274,  270,  271,  140,  296,   96,
      140,  140,  293,   96,  140,  140,  292,   96,  140,  273,
      291,  290,  275,  276,  289,  288,  140,  277,   96,  140,
      140,  284,   96,  140,  140,  201,   96,  140,  285,  278,

      286,  286,  286,  243,  243,  243,  279,  283,  281,  285,
      280,  321,  321,  321,  245,  245,  245,  140,  242,   96,
      140,  140,  241,   96,  140,  140,  240,   96,  140,  140,
      239,   96,  140,  140,  238,   96,  140,  140,  237,   96,
      140,  323,  140,  236,   96,  140,  358,  358,  358,  324,
      322,  140,  235,   96,  140,  140,  234,   96,  140,  325,
      326,  140,  327,   96,  140,  233,  140,  328,   96,  140,
      232,  329,  140,  330,   96,  140,  140,  231,   96,  140,
      230,  140,  331,   96,  140,  140,  229,   96,  140,  140,
      333,   96,  140,  286,  286,  286,  332,  334,  140,  228,

       96,  140,  140,  227,   96,  140,  140,  226,   96,  140,
      140,  225,   96,  140,  224,  140,  335,   96,  140,  223,
      220,  336,  219,  140,  218,   96,  140,  217,  216,  140,
      337,   96,  140,  215,  338,  214,  339,  213,  340,  341,
      140,  212,   96,  140,  140,  211,   96,  140,  140,  210,
       96,  140,  209,  140,  208,   96,  140,  140,  342,   96,
      140,  140,  345,   96,  140,  140,  207,   96,  140,  140,
      343,   96,  140,  202,  201,  344,  346,  140,   86,   96,
      140,  287,  287,  287,  348,  350,  199,  198,  140,  347,
       96,  140,  349,  140,  197,   96,  140,  140,  190,   96,

      140,  137,  351,  129,  352,  321,  321,  321,  140,  353,
       96,  140,  140,  113,   96,  140,  140,  104,   96,  140,
      140,   95,   96,  140,  379,   87,  140,  354,   96,  140,
      140,   86,   96,  140,  381,  445,  140,  380,   96,  140,
      140,   80,   96,  140,  140,   80,   96,  140,  140,  445,
       96,  140,  445,  445,  382,  383,  140,  384,   96,  140,
      140,  445,   96,  140,  445,  445,  140,  385,   96,  140,
      140,  445,   96,  140,  140,  445,   96,  140,  140,  445,
       96,  140,  445,  140,  445,   96,  140,  358,  358,  358,
      387,  386,  140,  445,   96,  140,  140,  445,   96,  140,

      140,  445,   96,  140,  445,  388,  390,  140,  389,   96,
      140,  445,  445,  140,  391,   96,  140,  140,  445,   96,
      140,  140,  445,   96,  140,  140,  445,   96,  140,  140,
      445,   96,  140,  140,  445,   96,  140,  392,  140,  445,
       96,  140,  445,  445,  140,  393,   96,  140,  140,  445,
       96,  140,  140,  445,   96,  140,  395,  140,  394,   96,
      140,  140,  445,   96,  140,  140,  445,   96,  140,  445,
      140,  396,   96,  140,  140,  445,   96,  140,  140,  445,
       96,  140,  397,  445,  140,  445,   96,  140,  398,  140,
      445,   96,  140,  140,  445,   96,  140,  445,  445,  410,

      411,  140,  445,   96,  140,  140,  445,   96,  140,  140,
      445,   96,  140,  140,  445,   96,  140,  414,  445,  445,
      445,  413,  140,  412,   96,  140,  140,  445,   96,  140,
      140,  445,   96,  140,  140,  445,   96,  140,  140,  445,
       96,  140,  445,  445,  140,  417,   96,  140,  418,  140,
      445,   96,  140,  140,  415,   96,  140,  416,  140,  445,
       96,  140,  140,  419,   96,  140,  445,  445,  140,  420,
       96,  140,  140,  445,   96,  140,  140,  445,   96,  140,
      140,  445,   96,  140,  140,  445,   96,  140,  140,  445,
       96,  140,  140,  445,   96,  140,  140,  445,   96,  140,

      445,  445,  427,  428,  140,  445,   96,  140,  140,  445,
       96,  140,  445,  140,  429,   96,  140,  140,  430,   96,
      140,  445,  445,  140,  431,   96,  140,  140,  445,   96,
      140,  445,  140,  432,   96,  140,  445,  445,  437,  140,
      438,   96,  140,  140,  445,   96,  140,  140,  445,   96,
      140,  140,  445,   96,  140,  445,  140,  440,   96,  140,
      140,  439,   96,  140,  445,  445,  140,  444,   96,  140,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  443,   67,   67,   67,   67,   72,   72,   72,
       72,   75,   75,   75,   75,   78,   78,   78,   78,   82,

       82,   82,   82,   83,   83,   83,   83,   96,   96,  140,
      445,  140,  148,  148,  148,  200,  200,  200,  200,   15,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445
    } ;

static yyconst flex_int16_t yy_chk[1265] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    3,  435,
        4,    3,    3,    4,    4,    5,    5,    6,    6,    7,

        8,    9,    9,    9,   10,   10,   10,    7,    8,   13,
       14,  434,   13,   14,   22,   22,   22,   22,   31,   23,
       23,   23,   23,   45,   45,   28,   29,   23,   31,    3,
       28,    4,   23,   24,   24,   24,   24,   28,   33,   32,
       35,   24,   28,   28,   32,   29,   24,   36,   35,   37,
       38,   39,   33,   36,   39,   33,  115,   39,   33,   37,
       39,   41,   38,  115,  426,   37,   38,  425,   41,  422,
       38,   41,   42,   42,   47,   47,   47,   47,  421,   42,
       48,   48,   48,   48,   90,   90,   90,   42,   48,   49,
       49,   49,   49,   48,  139,  139,   50,   49,   50,   50,

      191,  191,   49,   51,  214,   51,   51,   52,  214,   52,
       52,   53,  409,   53,   53,   54,   51,   54,   54,  192,
      192,   51,   55,   52,   55,   55,  406,   53,   51,  282,
      282,   54,  405,   51,   51,   57,  404,   57,   57,   71,
       71,   54,   52,  403,   58,   55,   58,   58,   60,  402,
       55,   56,   60,   56,   56,   59,  376,   59,   59,   62,
       71,   58,   60,   56,   71,   60,   71,   57,   60,   58,
       62,   71,  374,   62,  373,   59,   62,   56,  372,   62,
       56,   59,  371,   56,   61,   61,   63,  370,   63,   63,
       64,  367,   64,   64,  143,  143,  143,   61,   61,  366,

      365,   61,   63,  363,   61,   61,   66,  361,   66,   66,
       89,   89,   89,  319,   64,  318,   93,   89,   93,   93,
       93,   64,   89,  316,   64,   65,  314,   65,   65,   91,
       91,   91,   91,  203,  203,  203,   66,   91,  148,  313,
      148,  148,   91,  312,   65,   65,  311,   92,   92,   92,
       92,   65,  307,  304,  146,   92,  146,  146,  146,   65,
       92,   94,   94,   94,   94,  142,  142,  142,  149,   94,
      149,  149,  142,  151,   94,  151,  151,  142,  144,  144,
      144,  144,  145,  145,  145,  145,  144,  303,  151,  302,
      145,  144,  301,  299,  149,  145,  147,  147,  147,  147,

      150,  296,  150,  150,  147,  152,  295,  152,  152,  147,
      293,  153,  150,  153,  153,  154,  291,  154,  154,  155,
      290,  155,  155,  156,  289,  156,  156,  157,  288,  157,
      157,  158,  283,  158,  158,  152,  281,  159,  154,  159,
      159,  205,  205,  205,  157,  160,  156,  160,  160,  161,
      242,  161,  161,  162,  241,  162,  162,  163,  240,  163,
      163,  164,  239,  164,  164,  238,  165,  159,  165,  165,
      166,  161,  166,  166,  237,  236,  167,  160,  167,  167,
      235,  234,  162,  163,  165,  168,  164,  168,  168,  169,
      233,  169,  169,  232,  231,  170,  167,  170,  170,  171,

      230,  171,  171,  167,  169,  172,  229,  172,  172,  228,
      168,  173,  227,  173,  173,  174,  225,  174,  174,  175,
      224,  175,  175,  176,  223,  176,  176,  222,  172,  170,
      171,  177,  173,  177,  177,  178,  221,  178,  178,  176,
      179,  220,  179,  179,  180,  219,  180,  180,  181,  218,
      181,  181,  182,  216,  182,  182,  183,  180,  183,  183,
      206,  206,  206,  177,  182,  178,  179,  184,  215,  184,
      184,  185,  213,  185,  185,  186,  212,  186,  186,  181,
      211,  210,  183,  184,  208,  207,  187,  185,  187,  187,
      188,  202,  188,  188,  189,  200,  189,  189,  204,  186,

      204,  204,  204,  243,  243,  243,  188,  199,  190,  244,
      189,  244,  244,  244,  245,  245,  245,  246,  141,  246,
      246,  247,  137,  247,  247,  248,  136,  248,  248,  249,
      134,  249,  249,  250,  133,  250,  250,  251,  132,  251,
      251,  247,  252,  131,  252,  252,  285,  285,  285,  249,
      246,  253,  130,  253,  253,  256,  129,  256,  256,  250,
      251,  254,  252,  254,  254,  128,  255,  253,  255,  255,
      127,  253,  257,  254,  257,  257,  258,  126,  258,  258,
      125,  259,  255,  259,  259,  260,  124,  260,  260,  261,
      258,  261,  261,  286,  286,  286,  257,  259,  262,  121,

      262,  262,  263,  120,  263,  263,  264,  119,  264,  264,
      265,  118,  265,  265,  117,  266,  260,  266,  266,  116,
      113,  261,  112,  267,  111,  267,  267,  110,  109,  268,
      262,  268,  268,  108,  263,  107,  264,  105,  266,  267,
      269,  104,  269,  269,  270,  102,  270,  270,  271,  100,
      271,  271,   99,  272,   98,  272,  272,  273,  268,  273,
      273,  274,  271,  274,  274,  275,   97,  275,  275,  276,
      269,  276,  276,   88,   87,  270,  272,  277,   86,  277,
      277,  287,  287,  287,  274,  276,   77,   74,  278,  273,
      278,  278,  275,  279,   73,  279,  279,  280,   70,  280,

      280,   43,  277,   40,  278,  321,  321,  321,  322,  279,
      322,  322,  323,   34,  323,  323,  324,   30,  324,  324,
      325,   25,  325,  325,  322,   19,  326,  280,  326,  326,
      327,   18,  327,  327,  324,   15,  328,  323,  328,  328,
      329,   12,  329,  329,  330,   11,  330,  330,  331,    0,
      331,  331,    0,    0,  325,  327,  332,  329,  332,  332,
      333,    0,  333,  333,    0,    0,  334,  330,  334,  334,
      335,    0,  335,  335,  336,    0,  336,  336,  337,    0,
      337,  337,    0,  338,    0,  338,  338,  358,  358,  358,
      335,  333,  339,    0,  339,  339,  340,    0,  340,  340,

      341,    0,  341,  341,    0,  336,  338,  342,  337,  342,
      342,    0,    0,  343,  341,  343,  343,  344,    0,  344,
      344,  345,    0,  345,  345,  346,    0,  346,  346,  347,
        0,  347,  347,  348,    0,  348,  348,  345,  349,    0,
      349,  349,    0,    0,  350,  346,  350,  350,  351,    0,
      351,  351,  352,    0,  352,  352,  348,  353,  347,  353,
      353,  354,    0,  354,  354,  379,    0,  379,  379,    0,
      380,  350,  380,  380,  381,    0,  381,  381,  382,    0,
      382,  382,  352,    0,  383,    0,  383,  383,  353,  384,
        0,  384,  384,  385,    0,  385,  385,    0,    0,  381,

      383,  386,    0,  386,  386,  387,    0,  387,  387,  388,
        0,  388,  388,  389,    0,  389,  389,  387,    0,    0,
        0,  386,  390,  385,  390,  390,  391,    0,  391,  391,
      392,    0,  392,  392,  393,    0,  393,  393,  394,    0,
      394,  394,    0,    0,  395,  392,  395,  395,  393,  396,
        0,  396,  396,  397,  390,  397,  397,  391,  398,    0,
      398,  398,  410,  394,  410,  410,    0,    0,  411,  396,
      411,  411,  412,    0,  412,  412,  413,    0,  413,  413,
      414,    0,  414,  414,  415,    0,  415,  415,  416,    0,
      416,  416,  417,    0,  417,  417,  418,    0,  418,  418,

        0,    0,  413,  414,  419,    0,  419,  419,  420,    0,
      420,  420,    0,  427,  415,  427,  427,  428,  416,  428,
      428,    0,    0,  429,  417,  429,  429,  430,    0,  430,
      430,    0,  431,  420,  431,  431,    0,    0,  427,  432,
      428,  432,  432,  437,    0,  437,  437,  438,    0,  438,
      438,  439,    0,  439,  439,    0,  440,  432,  440,  440,
      443,  431,  443,  443,    0,    0,  444,  439,  444,  444,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  438,  446,  446,  446,  446,  447,  447,  447,
      447,  448,  448,  448,  448,  449,  449,  449,  449,  450,

      450,  450,  450,  451,  451,  451,  451,  452,  452,  453,
        0,  453,  454,  454,  454,  455,  455,  455,  455,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[92] =
    {   0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yyconst flex_int16_t yy_rule_linenum[91] =
    {   0,
       24,   25,   26,   27,   30,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   87,   89,   90,   91,   92,   93,   94,   95,   99,
      100,  101,  102,  103,  104,  106,  107,  108,  110,  111,
      112,  113,  115,  116,  117,  119,  120,  122,  123,  126,
      128,  130,  132,  133,  150,  163,  166,  167,  168,  170
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "gr8_scanner.l"
#line 4 "gr8_scanner.l"
// make relevant includes before including the parser's tab file
#include <string>
#include <vector>
#include <stdlib.h>
#include <cdk/ast/sequence_node.h>
#include <cdk/ast/expression_node.h>
#include <cdk/ast/lvalue_node.h>
#include "gr8_parser.tab.h"

std::vector<int> pilha(1,0);
int current_identation = 0;
int i;

// don't change this
#define yyerror LexerError

#line 971 "gr8_scanner.cpp"

#define INITIAL 0
#define X_STRING 1
#define X_COMMENT 2
#define X_LINE 3
#define X_IDENT 4
#define X_CHECK_IDENT 5
#define X_STRING_IGNORE 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 21 "gr8_scanner.l"

                {set_debug(0);}

#line 1146 "gr8_scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 446 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1220 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 91 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 91 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 92 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 24 "gr8_scanner.l"
yy_push_state(X_COMMENT); /* ignore comments */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 25 "gr8_scanner.l"
yy_push_state(X_COMMENT);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 26 "gr8_scanner.l"
yy_pop_state();
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 27 "gr8_scanner.l"
;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 30 "gr8_scanner.l"
{if (current_identation != 0){
                        yy_push_state(X_CHECK_IDENT);
                        current_identation = 0;
                        yyless(0);}
                        else {yyless(0);
                        }
                    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 38 "gr8_scanner.l"
return '<';
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 39 "gr8_scanner.l"
return '>';
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 40 "gr8_scanner.l"
return tEQ;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 41 "gr8_scanner.l"
return '-';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 42 "gr8_scanner.l"
return '+';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 43 "gr8_scanner.l"
return '*';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 44 "gr8_scanner.l"
return '/';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 45 "gr8_scanner.l"
return '%';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 46 "gr8_scanner.l"
return tNOT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 47 "gr8_scanner.l"
return tAND;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 48 "gr8_scanner.l"
return tOR;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 50 "gr8_scanner.l"
return tIF;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 51 "gr8_scanner.l"
return tELSE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 52 "gr8_scanner.l"
return tREAD;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 53 "gr8_scanner.l"
return tDEFINE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 54 "gr8_scanner.l"
return tPUBLIC;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 55 "gr8_scanner.l"
return tAS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 56 "gr8_scanner.l"
return tFUNCTION;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 57 "gr8_scanner.l"
return tPROCEDURE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 58 "gr8_scanner.l"
return tINT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 59 "gr8_scanner.l"
return tREAL;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 60 "gr8_scanner.l"
return tON;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 61 "gr8_scanner.l"
return tNEWS;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 62 "gr8_scanner.l"
return tINITIALLY;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 63 "gr8_scanner.l"
return tFAKE;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 64 "gr8_scanner.l"
return tTWEET;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 65 "gr8_scanner.l"
return tPOST;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 66 "gr8_scanner.l"
return tAGAIN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 67 "gr8_scanner.l"
return tSTOP;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 68 "gr8_scanner.l"
return tRETURN;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 69 "gr8_scanner.l"
return tASSIGN;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 70 "gr8_scanner.l"
return tTO;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 71 "gr8_scanner.l"
return tSWEEPING;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 72 "gr8_scanner.l"
return tFROM;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 73 "gr8_scanner.l"
return tBY;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 74 "gr8_scanner.l"
return tDO;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 75 "gr8_scanner.l"
return tUSES;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 76 "gr8_scanner.l"
return tELIF;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 77 "gr8_scanner.l"
return tTHEN;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 78 "gr8_scanner.l"
return tUSE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 79 "gr8_scanner.l"
return tFOR;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 80 "gr8_scanner.l"
return tCELL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 81 "gr8_scanner.l"
return tAT;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 82 "gr8_scanner.l"
return tNULL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 83 "gr8_scanner.l"
return tOBJECTS;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 84 "gr8_scanner.l"
return '?';
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 87 "gr8_scanner.l"
yylval.s = new std::string(yytext); return tIDENTIFIER;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 89 "gr8_scanner.l"
yy_push_state(X_STRING); yylval.s = new std::string("");
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 90 "gr8_scanner.l"
yy_pop_state(); return tSTRING;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 91 "gr8_scanner.l"
*yylval.s += yytext + 1;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 92 "gr8_scanner.l"
*yylval.s += yytext;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 93 "gr8_scanner.l"
*yylval.s += yytext + 1;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 94 "gr8_scanner.l"
yy_push_state(X_STRING_IGNORE);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 95 "gr8_scanner.l"
{i = strtol(yytext+1, nullptr, 7);
                                  if (i > 255) yyerror("Invalid number in base 7 (Overflow)");
                                  else *yylval.s += i;
                                }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 99 "gr8_scanner.l"
i = strtol(yytext+1, nullptr, 7); *yylval.s += i;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 100 "gr8_scanner.l"
i = strtol(yytext+1, nullptr, 7); *yylval.s += i;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 101 "gr8_scanner.l"
*yylval.s += '\t';
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 102 "gr8_scanner.l"
*yylval.s += '\n';
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 103 "gr8_scanner.l"
*yylval.s += '\r';
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 104 "gr8_scanner.l"
yyerror("newline in string");
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 106 "gr8_scanner.l"
yy_pop_state(); yy_pop_state(); return tSTRING;
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 107 "gr8_scanner.l"
yyerror("newline in string");
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 108 "gr8_scanner.l"
;
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 110 "gr8_scanner.l"
yy_push_state(X_LINE);
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 111 "gr8_scanner.l"
;
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 112 "gr8_scanner.l"
yy_pop_state();
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 113 "gr8_scanner.l"
;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 115 "gr8_scanner.l"
yylval.d = atof(yytext); return tDOUBLE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 116 "gr8_scanner.l"
yylval.d = atof(yytext); return tDOUBLE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 117 "gr8_scanner.l"
yylval.d = atof(yytext); return tDOUBLE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 119 "gr8_scanner.l"
yylval.d = atof(yytext); return tDOUBLE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 120 "gr8_scanner.l"
yylval.d = atof(yytext); return tDOUBLE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 122 "gr8_scanner.l"
yylval.i = strtol(yytext, nullptr, 10); return tINTEGER;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 123 "gr8_scanner.l"
yylval.i = strtol(yytext, nullptr, 7); return tINTEGER;
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 126 "gr8_scanner.l"
return ';';
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 128 "gr8_scanner.l"
yy_push_state(X_IDENT); current_identation = 0; yyless(0);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 130 "gr8_scanner.l"
{if ((current_identation % 8) == 0) current_identation += 8;
                      else current_identation = current_identation + 8 - (current_identation % 8);}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 132 "gr8_scanner.l"
{current_identation += 1; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 133 "gr8_scanner.l"
{if (current_identation > pilha.back()) {
                          pilha.push_back(current_identation);
                          yy_pop_state();
                          yyless(0);
                          return '{'; }

                        else if (current_identation < pilha.back()){
                          yy_push_state(X_CHECK_IDENT);
                          yyless(0);
                          }

                        else{
                          yy_pop_state();
                          yyless(0);
                          }
                        }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 150 "gr8_scanner.l"
{if (pilha.empty()) yyerror("Bad Identation");
                         else if(current_identation == pilha.back()){ yy_pop_state(); yyless(0);}
                         else {pilha.pop_back(); yyless(0); return '}';}

                        }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(X_STRING):
case YY_STATE_EOF(X_COMMENT):
case YY_STATE_EOF(X_LINE):
case YY_STATE_EOF(X_IDENT):
case YY_STATE_EOF(X_CHECK_IDENT):
case YY_STATE_EOF(X_STRING_IGNORE):
#line 156 "gr8_scanner.l"
{if(pilha.back() == 0) return 0;
						            else{
							              pilha.pop_back();
                            return '}';
						                }
						            }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 163 "gr8_scanner.l"
return *yytext;
	YY_BREAK
case 87:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 166 "gr8_scanner.l"
;
	YY_BREAK
case 88:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 167 "gr8_scanner.l"
;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 168 "gr8_scanner.l"
;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 170 "gr8_scanner.l"
std::cout << "THIS FUCKER: " << yytext << std::endl; yyerror("Unknown character");
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 172 "gr8_scanner.l"
ECHO;
	YY_BREAK
#line 1782 "gr8_scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	gr8_scanner_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	gr8_scanner_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					gr8_scanner_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) gr8_scanner_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 446 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 446 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 445);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) gr8_scanner_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) gr8_scanner_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		gr8_scanner_free((void *) b->yy_ch_buf  );

	gr8_scanner_free((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)gr8_scanner_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)gr8_scanner_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) gr8_scanner_alloc(new_size  );

		else
			(yy_start_stack) = (int *) gr8_scanner_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *gr8_scanner_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *gr8_scanner_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void gr8_scanner_free (void * ptr )
{
	free( (char *) ptr );	/* see gr8_scanner_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 172 "gr8_scanner.l"



